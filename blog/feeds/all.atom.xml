<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>網際內容管理系統</title><link href="./" rel="alternate"></link><link href="./feeds/all.atom.xml" rel="self"></link><id>./</id><updated>2024-04-25T23:15:33+08:00</updated><entry><title>2024 Spring 課程 W2</title><link href="./2024-Spring-w2-blog-tutorial.html" rel="alternate"></link><published>2024-04-12T17:56:00+08:00</published><updated>2024-04-25T23:15:33+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-04-12:./2024-Spring-w2-blog-tutorial.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;

&lt;h1&gt;甲班第一組組長如何建立 midag1 Team&lt;/h1&gt;
&lt;p&gt;在這部影片我學到了如何用Codespaces維護2a-midag8分組倉儲 操作歸納如下
用 Codespaces 開啟動態網頁
執行以下命令使 init_replit 檔案具有執行權限：
chmod u+x init_replit
執行 init_replit 檔案：
./init_replit
執行 main.py 檔案：
python3 main.py
用 Codespaces 開啟靜態網頁
執行以下命令啟動 Python 內建的簡易伺服器：
python3 -m http.server
如何進行改版
使用 git status 命令查看目前的修改狀態。
使用 git add . 命令將所有修改的檔案添加到暫存區。
使用 git commit -m "新增的的內容" 命令提交修改，並填入適合的提交訊息。
使用 git push 將本地的提交推送到遠端倉儲。&lt;/p&gt;
&lt;h1&gt;如何利用近端可攜系統維護分組網站&lt;/h1&gt;
&lt;p&gt;在這部影片我學到了如何用近端可攜系統維護分組網站 操作歸納如下
1.SSH 金鑰： 使用 Puttygen 建立一把 SSH 金鑰並將其存儲為 .ppk 格式的檔案。
2.SSH 金鑰導入 Putty： 使用 Putty 將 SSH 金鑰導入，以便在遠端伺服器上進行身份驗證。
3.PuTTY 會話設定： 在 Regedit 中找到 HKEY_CURRENT_USER\Software\SimonTatham\PuTTY\Sessions\github.com 鍵，將其匯出為 .reg 檔案，這將保存你的 PuTTY 會話設定。
4.本地端進行改版：
切換到暫存目錄：
cd tmp
克隆倉庫：
git clone --recurse-submodules git@github.com:mdecd2024/2a-midag1.git
進入克隆的倉庫目錄：
cd 2a-midag1
進行修改和提交：&lt;/p&gt;
&lt;h1&gt;進行修改...&lt;/h1&gt;
&lt;p&gt;git add .
git commit -m "自己要推的東西"
推送到遠端倉庫：
git push
5.其他使用者推送：
獲取你的 IPv4 地址：
ipconfig
在組別下的 Python 腳本中導入你的 IPv4 環境。
允許組別中的其他成員更新和推送修改。&lt;/p&gt;</content><category term="w2"></category><category term="網誌編寫 41023155"></category></entry><entry><title>2024 Spring 課程 W3</title><link href="./2024-Spring-W3-blog-tutorial.html" rel="alternate"></link><published>2024-04-12T16:11:00+08:00</published><updated>2024-04-25T23:15:33+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-04-12:./2024-Spring-W3-blog-tutorial.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;

&lt;h1&gt;將英文文章翻譯成中文並整理&lt;/h1&gt;
&lt;p&gt;222&lt;/p&gt;</content><category term="W3"></category><category term="網誌編寫 41023155"></category></entry><entry><title>2024 協同課程a-w3</title><link href="./2024-%E5%8D%94%E5%90%8C%E8%AA%B2%E7%A8%8Ba-w3-41023110.html" rel="alternate"></link><published>2024-04-12T16:05:00+08:00</published><updated>2024-04-25T23:15:33+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-04-12:./2024-協同課程a-w3-41023110.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;


&lt;h1&gt;w3 LaTeX 格式分工完成下列文章的英文與中文翻譯並列資料。&lt;/h1&gt;
&lt;p&gt;負責第三段 43-65page 由41023110 (introduction_orig.txt,
使用了chatgpt與劍橋辭翻譯，並用word編排翻譯段落。&lt;/p&gt;
&lt;h1&gt;w3-1 如何將 41123130 的個人倉儲設為 2a-midag2 分組倉儲的子模組&lt;/h1&gt;
&lt;p&gt;在replit來維護的話，有一些特定的方法，Repri是綁到你給他的賬號下。假如現在在近端做，就必須把它克隆下來然後再進行操作然後再推回去。利用SSH
，先確認在靜端是否有權限，權限是在登錄cadlab檔上的putty.reg，此部分是利用putty做的，在近端部分沒有時間限制，在目前系統上putty是沒有任何setings。但現在要用ssh刻隆下它，就必須要權限。在找到實體權限後雙擊就可寫入進去，在察看putty有出現對應的key與setings，都有就可用setings進行刻隆，並且改版可以push回去。載入之後有setings名稱，並確認是否有設proxy，因為沒有設ipv所以沒有proxy，所以之前設定部分要修改成none，並確認key是否有更改。key要設到外部才可攜。
確認可以連線後，就可以把key as push出來，key就會在主態登錄檔regedit中，在current_root下的software可找到設定的setings，並且裡面就有對應的key。
有權限後就可刻隆。刻隆在c槽比較快速，切換槽c並在槽中用mkdir建一個tmp，並用git clone --子模組recurse+ssh+對應帳號 刻隆下。
執行成功就可以讓倉儲設為子模組，先進入倉儲對應目錄把整個資料抓下，並git add。(分組倉儲底下)組倉儲名稱+git+子模組submodule+add(表示用git建立子模組)+個人課程倉儲+目錄，用https去抓子模組在分組倉儲是沒有權限的。 
可以把組員的倉儲抓下來。在個人更新時可以分段抓取，未處理完的章節可以不引進。在git push後不只建了目錄還會動gitmodules檔案，待第二個人還沒建子模組前就刻隆下來，將個人倉儲加為子模組之後，就要處理.gitmodules的衝突。&lt;/p&gt;
&lt;h1&gt;w3-2 將組員的個人倉儲設為分組倉儲子模組&lt;/h1&gt;
&lt;p&gt;已建立組別倉儲，利用倉儲對應的codespaces下git submodule add。確認git status分支是否跟主分支是同步的，在用ls-l秀出內容後clear下來。接著用git submodule add+倉儲網址+git+學號，指令意思是必須在分組倉儲目錄新增一個子模組，其中子模組要的資料在複製的網址中取得，並打上目錄名稱。成功克隆後add在commit推上去，推上後回到倉儲確認有子模組資料加入。其中子模組是有版本的，意思是可以開發跟推出同步進行，版本可自行決定公布。&lt;/p&gt;
&lt;h1&gt;w3-使用 Gitpod 維護個人網站&lt;/h1&gt;
&lt;p&gt;進入Gitpod連結登陸github帳號。利用倉儲網址打開，裡面沒有對應的模組，所以要先chmod u+x init_replit安裝模組。其中給予的資源並不輸codespaces，執行速度依樣快速。照樣打開python3，並且也有多的終端機，程式一樣會自動開啟瀏覽器，就可以直接進入編輯。若假如沒有下載子模組，Gitpod一樣會幫忙列出目錄，比codespaces稍好些。並且網址也是亂碼式保全功能。
要看靜態，新增一個終端機，然後用python3執行模組。啟動http server，直接啟動8000埠號瀏覽器幫你開啟，open就可看到靜態。
要關閉執行，一樣在Gitpod.io儀錶板，可看到登陸與改變內容，需要關閉點stop就會停止計算時間。&lt;/p&gt;</content><category term="a-w3-41023110"></category><category term="網誌編寫 41023110"></category></entry><entry><title>W7</title><link href="./41023108-w7.html" rel="alternate"></link><published>2024-04-07T21:25:00+08:00</published><updated>2024-04-25T23:15:33+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-04-07:./41023108-w7.html</id><summary type="html">&lt;p&gt;各週上課內容心得及實作項目&lt;/p&gt;
</summary><content type="html">&lt;p&gt;各週上課內容心得及實作項目&lt;/p&gt;


&lt;h1&gt;更分組網站內容&lt;/h1&gt;
&lt;p&gt;指派任務與組員，並要求其查找練習2說明如何在 CoppeliaSim 環境中, 利用 IPv6 ZeroMQ Remote API Python 進行兩個自由度的鋼球平衡檯自動控制系統模擬?相關內容。&lt;/p&gt;</content><category term="w7-41023108"></category><category term="網誌編寫 41023108"></category></entry><entry><title>2024 協同課程a-w2.</title><link href="./2024-%E5%8D%94%E5%90%8C%E8%AA%B2%E7%A8%8Ba-w2.-41023110.html" rel="alternate"></link><published>2024-03-29T17:18:00+08:00</published><updated>2024-04-25T23:15:33+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-03-29:./2024-協同課程a-w2.-41023110.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;


&lt;h1&gt;w2-4如何用Github Codespaces維護網站內容&lt;/h1&gt;
&lt;p&gt;每一個倉儲都有&lt;code&gt;，在完成建立組倉儲後有code就可以改版。
任何一個倉儲中都有配置code，codespaces是一個線上整合環境與replit相似，只是介面是另一個配置。
在倉儲下可以建一個在主分之來建codespaces。
先啟動動態在功能表還原終端系統，並新增一個終端系統，有兩意思給指令分別啟動動態與靜態。
在開始run後要執行python3 main.py，遇到執行時沒有flask模組。
就要去chmod u+x init-replit讓程式可以執行，讓他幫其安裝對應模組。最後在./init-replit。
網站就會給一個阜可以開啟動態。要在python3 mhttp.senver 啟動一個模組，因系統帶有一個動態一個靜態。
靜態還有一個index，更且有一個index可以啟動，帶進編輯器。
index阻礙小輸送快速，約0秒就跳進content跟index，只要用這指令啟用靜態就可以看到更改了，改版會力馬有反應。
每一次阜號都是不一樣安全性高。
code每月給定數量相同，編輯可以在介面外，在上傳時開啟就好，使用完後要記得關閉，每月用量平均好就可以一直免費使用。&lt;/p&gt;
&lt;h1&gt;w2-5說明如何利用近端可攜系統維護分組網站&lt;/h1&gt;
&lt;p&gt;用ssh來動倉儲，需要有settings。
去到PuTTY Configuration中可看到盡端還沒有settings，表示見了之後會存到系統的登入閘。
所以可用regedit看到三個倉儲都可同步。
從PuTTY開始連線到github.com並把settings也存到github.com，要把剛才的ppy給它。
但目前ppk是在C槽中，開關機的話就會不見，所以要拉到外部隨身碟，就編可攜的。
在實體的路徑下去進入，就可以去clone下來，並切換到c槽git clone+submodules git+帳號+倉儲作業名稱執行。
有對應settings的key並且open過了，就有權限可以拉下來。&lt;/p&gt;</content><category term="a-w2.-41023110"></category><category term="網誌編寫 41023110"></category></entry><entry><title>W6</title><link href="./41023108-w6.html" rel="alternate"></link><published>2024-03-29T16:51:00+08:00</published><updated>2024-04-25T23:15:33+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-03-29:./41023108-w6.html</id><summary type="html">&lt;p&gt;第六週實作內容報告&lt;/p&gt;
</summary><content type="html">&lt;p&gt;第六週實作內容報告&lt;/p&gt;


&lt;h1&gt;w6&lt;/h1&gt;
&lt;p&gt;在分組網站加入w4任務
第八組自評分數:80分&lt;/p&gt;
&lt;p&gt;下面為2a影片嵌入各組員分組網站網頁連結，影片、摘要、字幕文字檔皆在連結內。&lt;/p&gt;
&lt;h2&gt;41023108&lt;/h2&gt;
&lt;p&gt;組員自評: 75分&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mdecd2024.github.io/2a-midag8/content/w4%202a%20hw2(w4.html"&gt;2a-midag8 w4 2a hw4&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;41023110&lt;/h2&gt;
&lt;p&gt;組員自評: 70分&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mdecd2024.github.io/2a-midag8/content/w4%202a%20hw2(w3.html"&gt;2a-midag8 w4 2a hw3&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;41023155&lt;/h2&gt;
&lt;p&gt;組員自評: 70分&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mdecd2024.github.io/2a-midag8/content/w4%202a%20hw2(w2.html"&gt;2a-midag8 w4 2a hw2&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;41023211&lt;/h2&gt;
&lt;p&gt;組員自評: 70分&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mdecd2024.github.io/2a-midag8/content/w4%202a%20hw2(w1.html"&gt;2a-midag8 w4 2a hw1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;將w4-w5週影片剪輯實作網址個別建立在此頁每個組員學號下方，並讓其自評自己的分數
也能知道剪輯的各週影片都有什麼?&lt;/p&gt;</content><category term="w6-41023108"></category><category term="網誌編寫 41023108"></category></entry><entry><title>W6</title><link href="./2024-Spring-w6-blog-tutorial.html" rel="alternate"></link><published>2024-03-28T16:18:00+08:00</published><updated>2024-04-25T23:15:33+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-03-28:./2024-Spring-w6-blog-tutorial.html</id><summary type="html">&lt;p&gt;第六週實作內容報告&lt;/p&gt;
</summary><content type="html">&lt;p&gt;第六週實作內容報告&lt;/p&gt;


&lt;h1&gt;w6&lt;/h1&gt;
&lt;p&gt;w4任務
第八組自評分數:80分&lt;/p&gt;
&lt;p&gt;下面為2a影片嵌入各組員分組網站網頁連結，影片、摘要、字幕文字檔皆在連結內。&lt;/p&gt;
&lt;h2&gt;41023108&lt;/h2&gt;
&lt;p&gt;組員自評: 75分&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mdecd2024.github.io/2a-midag8/content/w4%202a%20hw2(w4.html"&gt;2a-midag8 w4 2a hw4&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;41023110&lt;/h2&gt;
&lt;p&gt;組員自評: 70分&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mdecd2024.github.io/2a-midag8/content/w4%202a%20hw2(w3.html"&gt;2a-midag8 w4 2a hw3&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;41023155&lt;/h2&gt;
&lt;p&gt;組員自評: 70分&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mdecd2024.github.io/2a-midag8/content/w4%202a%20hw2(w2.html"&gt;2a-midag8 w4 2a hw2&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;41023211&lt;/h2&gt;
&lt;p&gt;組員自評: 70分&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mdecd2024.github.io/2a-midag8/content/w4%202a%20hw2(w1.html"&gt;2a-midag8 w4 2a hw1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;將w4-w5週影片剪輯實作網址個別建立在此頁每個組員學號下方，並讓其自評自己的分數
也能知道剪輯的各週影片都有什麼?&lt;/p&gt;</content><category term="w6"></category><category term="網誌編寫"></category></entry><entry><title>W5</title><link href="./41023108-w5.html" rel="alternate"></link><published>2024-03-22T16:18:00+08:00</published><updated>2024-04-25T23:15:33+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-03-22:./41023108-w5.html</id><summary type="html">&lt;p&gt;第五週實作內容報告&lt;/p&gt;
</summary><content type="html">&lt;p&gt;第五週實作內容報告&lt;/p&gt;


&lt;h1&gt;w5&lt;/h1&gt;
&lt;h2&gt;統整網誌&lt;/h2&gt;
&lt;p&gt;將組員個人網誌納入分組倉儲目錄下，並持續更新各影片剪輯後製，在嶔入影片過程中多次校正文檔，我們使用的軟體是https://www.capcut.com/my-edit這個軟體，目前字幕只支援簡體中文所以我們必須在翻完後再重新拉回進度條去逐字更改翻錯的內容及將簡體字改成繁體字，20分鐘以上的影片通常都會要剪上1hr以上時間。&lt;/p&gt;</content><category term="w5-41023108"></category><category term="網誌編寫 41023108"></category></entry><entry><title>W4</title><link href="./41023108-w4.html" rel="alternate"></link><published>2024-03-15T16:18:00+08:00</published><updated>2024-04-25T23:15:33+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-03-15:./41023108-w4.html</id><summary type="html">&lt;p&gt;第四週實作內容報告&lt;/p&gt;
</summary><content type="html">&lt;p&gt;第四週實作內容報告&lt;/p&gt;


&lt;h1&gt;w4&lt;/h1&gt;
&lt;h2&gt;影片上字幕&lt;/h2&gt;
&lt;p&gt;將各週影片上字幕並置入分組網頁上。
統整各週內容合併成網誌，目前進度中的專案還有LaTeX轉pdf及各週還有一些影片沒完整上傳
，對於使用LaTeX還是很有問題，想直接在倉儲裡新建一個新目錄存放圖片檔或後續的零件繪製的檔案，這樣downloaads目錄才不會那麼亂，就只是檔案路徑要改在我自己建立的目錄下。&lt;/p&gt;</content><category term="w4-41023108"></category><category term="網誌編寫 41023108"></category></entry><entry><title>2024 協同課程a-w2</title><link href="./2024-%E5%8D%94%E5%90%8C%E8%AA%B2%E7%A8%8Ba-w2-41023110.html" rel="alternate"></link><published>2024-03-08T18:50:00+08:00</published><updated>2024-04-25T23:15:33+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-03-08:./2024-協同課程a-w2-41023110.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引。&lt;/p&gt;


&lt;h1&gt;w2-1 說明甲班第一組組長如何建立 midag1 Team, 並利用 Codespaces 維護 2a-midag1 分組倉儲&lt;/h1&gt;
&lt;p&gt;用github classroom建立組別倉儲，組長在or create a new team處以midag X 來稱謂組別名稱並+create team創立。在組別創立後，組員各自去join進入組別內。倉儲完全建立好後去到倉儲的settings並選取pages就可進入主分支。啟動完github pages就可以做code，並使用codespaces來維護內容。在codespaces中有許多終端機許多埠號資源可使用，不需要再公用443。啟動終端機要先安裝模組。使用者+執行+檔案位置=chmod u+x init_replit執行，執行安裝好後會直接給予2記憶體容量。但沒有run了，所以要在自己設定python3 main.py執行動態，利用8080幫我們開啟瀏覽器。連結埠號會呈現亂碼，所以別人無法進入。login進入動態後就可更改內容。終端機每個人每月都有120code小時。要push倉儲要新增終端機後，進行git add-&amp;gt;git commit"網頁標題"，執行後就會直接推上不需要在轉檔。啟動靜態要在新增終端機，有python3內建模組了就可以直接http.server直接啟動埠號，8000會自動開啟瀏覽器連結，就可以直接進入到靜態。用完codespaces要在關閉code讓計時暫停。&lt;/p&gt;
&lt;h1&gt;w2-2 說明如何利用Replit管理從 Classroom 取得的分組倉儲&lt;/h1&gt;
&lt;p&gt;在Replit中需要新建import中不會有分組的網站，需要用from url來導入。導入後要改成python模式在import，就會推入分組倉儲，但是權限並沒有Replit上。我們還沒有身分去維護分組倉儲，要在shell中執行ssh-keygen就會跟s.cycu上一樣。之後要去找導入的倉儲位置，利用出現+工作=pwd執行，就會出現倉儲位置在home runnre下面。就知道讓分組倉儲跳到runner就可以進入.ssh。回到shell中利用更換目錄cd ../執行就可以跳到runner下，在常列印ls -l執行。就可以看到出現的pub在組長下，就有可用pub。再來要建立個人id。到檔案中尋找putty，確認有putty就要新增ssh並複製上import儲存。再去到putty內看到puttygen.exe要對應格式，在puttygen.exe要generate產生亂數，並出現內容全部複製到對應組長倉儲設定下settings，在settings中貼上複製的內容。id要存兩個地方，另一個要在ssh裡就是rsa，兩個id都儲存後就會載入並秀出pub key。&lt;/p&gt;
&lt;h1&gt;w2-3 如何利用近端可攜環境與外部 IPv4 開啟動態網站。&lt;/h1&gt;
&lt;p&gt;用ssh來啟動它，要克隆它去到靜態拉出putty，近端中沒有任何settings。建立之後會存在系統登錄閘，在黑窗用regedit機制跑可以使三個倉儲同步，就不怕code用完。並且有外擴ipv4等同有一個伺服器，就算在遠端去到防火牆設置ip就能進入。用PuTTY Configuration輸入ip定github.com，在sessions也是輸入github.com，並到ssh把剛設立的ppk給予它。倉儲要在常用資料位置，讓他可以隨時啟動，啟動近端時目錄可以方便鎖定。在ssh的credentials中的機制設置對應的資料夾中的ppk位置，在任何一台開起可攜環境後續就不會出現跑掉的問題。save後open後會給予一把key，此key連線時是無法取得的。存取github.com的檔案要匯出在可攜環境。若有對應的key並有open過了兩條件，那是可以有權限用ssh抓取下來。改版後就可以推回倉儲。在近端就自由了，可以啟動動態進入。之後小組可以各自獨立編輯，不會受他人干擾。若要讓組員連接過來，要先改密碼之後查詢ip，並複製到槽中的init.py去修改，丟入外部ip儲存，使其電腦變成一台主機。在cms一次組員就可以動作了&lt;/p&gt;</content><category term="a-w2-41023110"></category><category term="網誌編寫 41023110"></category></entry><entry><title>W2</title><link href="./41023108-w2.html" rel="alternate"></link><published>2024-03-04T00:00:00+08:00</published><updated>2024-04-25T23:15:33+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-03-04:./41023108-w2.html</id><summary type="html">&lt;p&gt;第二週實作內容報告&lt;/p&gt;
</summary><content type="html">&lt;p&gt;第二週實作內容報告&lt;/p&gt;

&lt;h1&gt;w2&lt;/h1&gt;
&lt;p&gt;建立Github Classroom 指定分組倉儲，並使用replit、Codespaces及可攜環境維護分組倉儲，在git clone至近端執行動態網站.&lt;/p&gt;
&lt;h2&gt;利用 Github Classroom 指定分組倉儲&lt;/h2&gt;
&lt;p&gt;1.由組長建立2a-midagx名稱的倉儲分組網站，並找定組員join至剛建立的網站，使用codespaces維護倉儲網站，可直接安裝模組啟動動態網站，做法上和replit很像，一樣使用python3 main.py進入分組動態網站，使用python3 -m http.sever開啟靜態網站，說明codespaces使用上的限制。
2.使用replit管理github分組倉儲&lt;/p&gt;
&lt;h2&gt;利用 Codespaces 維護倉儲與網站&lt;/h2&gt;
&lt;p&gt;利用code中的Codespaces維護，開啟後用終端機開啟動態靜態網站，也可以在裡面更新網誌，記得在開啟python3前需要先安裝模組，就跟replit一樣需先確認是否有安裝過模組。&lt;/p&gt;
&lt;h2&gt;在近端執行動態網站&lt;/h2&gt;
&lt;p&gt;可攜環境需先至mde.tw網站上下載 portable_2024.7z 這個壓縮檔案，解壓縮至個人隨身系統，步驟如下&lt;/p&gt;
&lt;pre class="brush: python"&gt;
1.創建putty中的key
2.開啟可攜系統cmd
3.開啟後輸入cd tmp 導入tmp目錄中
4.進去tmp後 輸入git clone --recurse-submodules 倉儲網址.git(克隆遠端數據庫)
5.確認tmp目錄下有自己倉儲目錄後 輸入cd 倉儲名稱
6.進入倉儲目錄後，cms即可開啟動態網站
&lt;/pre&gt;</content><category term="w2-41023108"></category><category term="網誌編寫 41023108"></category></entry><entry><title>2024 Spring 課程 W1</title><link href="./2024-Spring-w1-blog-tutorial.html" rel="alternate"></link><published>2024-02-18T11:56:00+08:00</published><updated>2024-04-25T23:15:33+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-02-18:./2024-Spring-w1-blog-tutorial.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;


&lt;h1&gt;內容管理系統&lt;/h1&gt;
&lt;p&gt;使用者可以自行利用 &lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; 倉儲作為 Template, 建立自己的網站內容管理系統.&lt;/p&gt;
&lt;p&gt;引用網站網址連結的方法:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; - 在文章中多次引用同一個網站連結時, 可以使用此種方法.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;https://github.com/mdecycu/cmsimde_site&lt;/a&gt; - 假如想要快速將網址套用 html 網站連結, 可以使用此種方法.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; - 也可以使用 Markdown 的標準網站連結使用格式.&lt;/p&gt;
&lt;pre class="brush: python"&gt;
# 引用 Python 程式的方法
for i in range(10):
    print(i, "列出字串")
&lt;/pre&gt;

&lt;p&gt;也可以直接在 .md 檔案中使用 html 標註, 或加入 Javascript 或 Brython 程式碼.&lt;/p&gt;
&lt;p&gt;從 1 累加到 100:&lt;/p&gt;
&lt;p&gt;&lt;button id="add1to100"&gt;1 add to 100&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;將 iterable 與 iterator &lt;a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438"&gt;相關說明&lt;/a&gt;, 利用 Brython 與 Ace Editor 整理在這個頁面.&lt;/p&gt;
&lt;!-- 導入 brython 程式庫 --&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/brython.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/brython_stdlib.js"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;!-- 啟動 Brython --&gt;
&lt;p&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 FileSaver 與 filereader --&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/ace/FileSaver.min.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/filereader.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 ace --&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/ace/ace.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/ext-language_tools.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/mode-python3.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/snippets/python.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 --&gt;
&lt;script src="./../cmsimde/static/Cango-24v03-min.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/gearUtils-09.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/SVGpathUtils-6v03-min.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/sylvester.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/PrairieDraw.js"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/javascript"&gt;
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 開始 --&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 結束--&gt;&lt;/p&gt;
&lt;!-- editor1 開始 --&gt;
&lt;p&gt;&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;&lt;/p&gt;
&lt;div id="kw_editor1" style="width: 600px; height: 300px;"&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 存擋表單開始 --&gt;&lt;/p&gt;
&lt;form&gt;&lt;label&gt;Filename: &lt;input id="kw_filename" placeholder="input file name" type="text"/&gt;.py&lt;/label&gt; &lt;input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/&gt;&lt;/form&gt;
&lt;p&gt;&lt;!-- 存擋表單結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕開始 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;button id="kw_run1"&gt;Run&lt;/button&gt; &lt;button id="kw_show_console1"&gt;Output&lt;/button&gt; &lt;button id="kw_clear_console1"&gt;清除輸出區&lt;/button&gt;&lt;button id="clear_bd1"&gt;清除繪圖區&lt;/button&gt;&lt;button onclick="window.location.reload()"&gt;Reload&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 程式執行 ouput 區 --&gt;&lt;/p&gt;
&lt;div style="width: 100%; height: 100%;"&gt;&lt;textarea autocomplete="off" id="kw_console1"&gt;&lt;/textarea&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --&gt;&lt;/p&gt;
&lt;div id="brython_div1"&gt;&lt;/div&gt;
&lt;!-- editor1 結束 --&gt;
&lt;hr/&gt;&lt;!-- ########################################## --&gt;&lt;p&gt;從 1 累加到 100 part2:&lt;/p&gt;
&lt;p&gt;&lt;button id="add1to100part2"&gt;1 add to 100&lt;/button&gt;&lt;button id="cango_three_gears"&gt;cango_three_gears&lt;/button&gt;&lt;button id="bsnake"&gt;BSnake&lt;/button&gt;&lt;button id="aitetris"&gt;AI Tetris&lt;/button&gt;&lt;button id="threejsblock"&gt;Rotating Block&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 part2 開始 --&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 part2 結束--&gt;&lt;/p&gt;
&lt;!-- editor2 開始 --&gt;
&lt;p&gt;&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;&lt;/p&gt;
&lt;div id="kw_editor2" style="width: 600px; height: 300px;"&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 存擋表單開始 --&gt;&lt;/p&gt;
&lt;form&gt;&lt;label&gt;Filename: &lt;input id="kw_filename2" placeholder="input file name" type="text"/&gt;.py&lt;/label&gt; &lt;input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/&gt;&lt;/form&gt;
&lt;p&gt;&lt;!-- 存擋表單結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕開始 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;button id="kw_run2"&gt;Run&lt;/button&gt; &lt;button id="kw_show_console2"&gt;Output&lt;/button&gt; &lt;button id="kw_clear_console2"&gt;清除輸出區&lt;/button&gt;&lt;button id="clear_bd2"&gt;清除繪圖區&lt;/button&gt;&lt;button onclick="window.location.reload()"&gt;Reload&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 程式執行 ouput 區 --&gt;&lt;/p&gt;
&lt;div style="width: 100%; height: 100%;"&gt;&lt;textarea autocomplete="off" id="kw_console2"&gt;&lt;/textarea&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --&gt;&lt;/p&gt;
&lt;div id="brython_div2"&gt;&lt;/div&gt;
&lt;!-- editor2 結束 --&gt;
&lt;hr/&gt;&lt;p&gt;
&lt;script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"&gt;&lt;/script&gt;</content><category term="w1"></category><category term="網誌編寫 41023155"></category></entry></feed>